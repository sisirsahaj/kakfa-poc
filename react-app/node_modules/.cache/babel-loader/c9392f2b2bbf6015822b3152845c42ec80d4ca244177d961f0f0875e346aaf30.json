{"ast":null,"code":"var _jsxFileName = \"/Users/sisirdas/Projects/health-kit/consumer-webapp/kafka-websocket-consumer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [deviceData, setDeviceData] = useState({});\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'ECG Data',\n      data: [],\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  });\n  const {\n    lastMessage\n  } = useWebSocket('ws://localhost:3001');\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const messageContent = lastMessage.data;\n      const [deviceId, ecgData] = messageContent.split(':');\n      setDeviceData(prev => ({\n        ...prev,\n        [deviceId]: [...(prev[deviceId] || []), ecgData]\n      }));\n\n      // Assuming you want to plot for the first device\n      const firstDeviceId = Object.keys(deviceData)[0];\n      if (firstDeviceId) {\n        setChartData(prev => ({\n          ...prev,\n          labels: [...prev.labels, prev.labels.length + 1],\n          datasets: prev.datasets.map(dataset => ({\n            ...dataset,\n            data: [...dataset.data, ecgData]\n          }))\n        }));\n      }\n    }\n  }, [lastMessage, deviceData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Kafka Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"REdKimwj1fizlPbD4tRR3TUNYik=\", false, function () {\n  return [useWebSocket];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","Line","jsxDEV","_jsxDEV","App","_s","deviceData","setDeviceData","chartData","setChartData","labels","datasets","label","data","borderColor","tension","lastMessage","messageContent","deviceId","ecgData","split","prev","firstDeviceId","Object","keys","length","map","dataset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sisirdas/Projects/health-kit/consumer-webapp/kafka-websocket-consumer/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport { Line } from 'react-chartjs-2';\n\nfunction App() {\n  const [deviceData, setDeviceData] = useState({});\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'ECG Data',\n        data: [],\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1,\n      },\n    ],\n  });\n  const { lastMessage } = useWebSocket('ws://localhost:3001');\n\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const messageContent = lastMessage.data;\n      const [deviceId, ecgData] = messageContent.split(':');\n      setDeviceData(prev => ({\n        ...prev,\n        [deviceId]: [...(prev[deviceId] || []), ecgData],\n      }));\n\n      // Assuming you want to plot for the first device\n      const firstDeviceId = Object.keys(deviceData)[0];\n      if (firstDeviceId) {\n        setChartData(prev => ({\n          ...prev,\n          labels: [...prev.labels, prev.labels.length + 1],\n          datasets: prev.datasets.map(dataset => ({\n            ...dataset,\n            data: [...dataset.data, ecgData],\n          })),\n        }));\n      }\n    }\n  }, [lastMessage, deviceData]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Kafka Messages</h2>\n        <Line data={chartData} />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC;IACzCY,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,UAAU;MACjBC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC,CAAC;EACF,MAAM;IAAEC;EAAY,CAAC,GAAGhB,YAAY,CAAC,qBAAqB,CAAC;EAE3DD,SAAS,CAAC,MAAM;IACd,IAAIiB,WAAW,KAAK,IAAI,EAAE;MACxB,MAAMC,cAAc,GAAGD,WAAW,CAACH,IAAI;MACvC,MAAM,CAACK,QAAQ,EAAEC,OAAO,CAAC,GAAGF,cAAc,CAACG,KAAK,CAAC,GAAG,CAAC;MACrDb,aAAa,CAACc,IAAI,KAAK;QACrB,GAAGA,IAAI;QACP,CAACH,QAAQ,GAAG,CAAC,IAAIG,IAAI,CAACH,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAEC,OAAO;MACjD,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMG,aAAa,GAAGC,MAAM,CAACC,IAAI,CAAClB,UAAU,CAAC,CAAC,CAAC,CAAC;MAChD,IAAIgB,aAAa,EAAE;QACjBb,YAAY,CAACY,IAAI,KAAK;UACpB,GAAGA,IAAI;UACPX,MAAM,EAAE,CAAC,GAAGW,IAAI,CAACX,MAAM,EAAEW,IAAI,CAACX,MAAM,CAACe,MAAM,GAAG,CAAC,CAAC;UAChDd,QAAQ,EAAEU,IAAI,CAACV,QAAQ,CAACe,GAAG,CAACC,OAAO,KAAK;YACtC,GAAGA,OAAO;YACVd,IAAI,EAAE,CAAC,GAAGc,OAAO,CAACd,IAAI,EAAEM,OAAO;UACjC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;MACL;IACF;EACF,CAAC,EAAE,CAACH,WAAW,EAAEV,UAAU,CAAC,CAAC;EAE7B,oBACEH,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB1B,OAAA;MAAQyB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5B1B,OAAA;QAAA0B,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvB9B,OAAA,CAACF,IAAI;QAACY,IAAI,EAAEL;MAAU;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC5B,EAAA,CAhDQD,GAAG;EAAA,QAacJ,YAAY;AAAA;AAAAkC,EAAA,GAb7B9B,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}