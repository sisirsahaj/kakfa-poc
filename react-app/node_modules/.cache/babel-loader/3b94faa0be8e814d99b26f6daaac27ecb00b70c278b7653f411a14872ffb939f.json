{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachSharedListeners = void 0;\nvar globals_1 = require(\"./globals\");\nvar constants_1 = require(\"./constants\");\nvar manage_subscribers_1 = require(\"./manage-subscribers\");\nvar socket_io_1 = require(\"./socket-io\");\nvar heartbeat_1 = require(\"./heartbeat\");\nvar bindMessageHandler = function (webSocketInstance, url, heartbeatOptions) {\n  var onMessageCb;\n  if (heartbeatOptions && webSocketInstance instanceof WebSocket) {\n    onMessageCb = (0, heartbeat_1.heartbeat)(webSocketInstance, typeof heartbeatOptions === 'boolean' ? undefined : heartbeatOptions);\n  }\n  webSocketInstance.onmessage = function (message) {\n    onMessageCb === null || onMessageCb === void 0 ? void 0 : onMessageCb();\n    (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n      if (typeof subscriber.optionsRef.current.filter === 'function' && subscriber.optionsRef.current.filter(message) !== true) {\n        return;\n      }\n      if (heartbeatOptions && typeof heartbeatOptions !== \"boolean\" && (heartbeatOptions === null || heartbeatOptions === void 0 ? void 0 : heartbeatOptions.returnMessage) === message.data) return;\n      subscriber.setLastMessage(message);\n    });\n  };\n};\nvar bindOpenHandler = function (webSocketInstance, url) {\n  webSocketInstance.onopen = function (event) {\n    (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n      subscriber.setReadyState(constants_1.ReadyState.OPEN);\n    });\n  };\n};\nvar bindCloseHandler = function (webSocketInstance, url) {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = function (event) {\n      (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n        subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n      });\n      delete globals_1.sharedWebSockets[url];\n      (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n        var _a;\n        if (subscriber.optionsRef.current.shouldReconnect && subscriber.optionsRef.current.shouldReconnect(event)) {\n          var reconnectAttempts = (_a = subscriber.optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            var nextReconnectInterval = typeof subscriber.optionsRef.current.reconnectInterval === 'function' ? subscriber.optionsRef.current.reconnectInterval(subscriber.reconnectCount.current) : subscriber.optionsRef.current.reconnectInterval;\n            setTimeout(function () {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, nextReconnectInterval !== null && nextReconnectInterval !== void 0 ? nextReconnectInterval : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts);\n            console.warn(\"Max reconnect attempts of \".concat(reconnectAttempts, \" exceeded\"));\n          }\n        }\n      });\n    };\n  }\n};\nvar bindErrorHandler = function (webSocketInstance, url) {\n  webSocketInstance.onerror = function (error) {\n    (0, manage_subscribers_1.getSubscribers)(url).forEach(function (subscriber) {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose(__assign(__assign({}, error), {\n          code: 1006,\n          reason: \"An error occurred with the EventSource: \".concat(error),\n          wasClean: false\n        }));\n        subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n      }\n    });\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\nvar attachSharedListeners = function (webSocketInstance, url, optionsRef, sendMessage) {\n  var interval;\n  if (optionsRef.current.fromSocketIO) {\n    interval = (0, socket_io_1.setUpSocketIOPing)(sendMessage);\n  }\n  bindMessageHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n  return function () {\n    if (interval) clearInterval(interval);\n  };\n};\nexports.attachSharedListeners = attachSharedListeners;","map":{"version":3,"names":["globals_1","require","constants_1","manage_subscribers_1","socket_io_1","heartbeat_1","bindMessageHandler","webSocketInstance","url","heartbeatOptions","onMessageCb","WebSocket","heartbeat","undefined","onmessage","message","getSubscribers","forEach","subscriber","optionsRef","current","onMessage","filter","returnMessage","data","setLastMessage","bindOpenHandler","onopen","event","reconnectCount","onOpen","setReadyState","ReadyState","OPEN","bindCloseHandler","onclose","onClose","CLOSED","sharedWebSockets","shouldReconnect","reconnectAttempts","_a","DEFAULT_RECONNECT_LIMIT","nextReconnectInterval","reconnectInterval","setTimeout","reconnect","DEFAULT_RECONNECT_INTERVAL_MS","onReconnectStop","console","warn","concat","bindErrorHandler","onerror","error","onError","isEventSourceSupported","EventSource","__assign","code","reason","wasClean","close","attachSharedListeners","sendMessage","interval","fromSocketIO","setUpSocketIOPing","clearInterval","exports"],"sources":["/Users/sisirdas/Projects/health-kit/kafka-websocket-consumer/node_modules/react-use-websocket/src/lib/attach-shared-listeners.ts"],"sourcesContent":["import { sharedWebSockets } from './globals';\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\nimport { getSubscribers } from './manage-subscribers';\nimport { MutableRefObject } from 'react';\nimport { HeartbeatOptions, Options, SendMessage, WebSocketLike } from './types';\nimport { setUpSocketIOPing } from './socket-io';\nimport { heartbeat } from './heartbeat';\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  heartbeatOptions?: boolean | HeartbeatOptions\n) => {\n  let onMessageCb: () => void;\n\n  if (heartbeatOptions && webSocketInstance instanceof WebSocket) {\n    onMessageCb = heartbeat(webSocketInstance, typeof heartbeatOptions === 'boolean' ? undefined : heartbeatOptions);\n  }\n\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    onMessageCb?.();\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (\n        typeof subscriber.optionsRef.current.filter === 'function' &&\n        subscriber.optionsRef.current.filter(message) !== true\n      ) {\n        return;\n      }\n\n      if (\n        heartbeatOptions &&\n        typeof heartbeatOptions !== \"boolean\" &&\n        heartbeatOptions?.returnMessage === message.data\n      )\n        return;\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    getSubscribers(url).forEach(subscriber => {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(ReadyState.OPEN);\n    });\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n      getSubscribers(url).forEach(subscriber => {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      });\n      \n      delete sharedWebSockets[url];\n  \n      getSubscribers(url).forEach(subscriber => {\n        if (\n          subscriber.optionsRef.current.shouldReconnect &&\n          subscriber.optionsRef.current.shouldReconnect(event)\n        ) {\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            const nextReconnectInterval = typeof subscriber.optionsRef.current.reconnectInterval === 'function' ?\n              subscriber.optionsRef.current.reconnectInterval(subscriber.reconnectCount.current) :\n              subscriber.optionsRef.current.reconnectInterval;\n\n            setTimeout(() => {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n          }\n        }\n      });\n    };\n  }\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\n          ...error,\n          code: 1006,\n          reason: `An error occurred with the EventSource: ${error}`,\n          wasClean: false,\n        });\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      }\n    });\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexport const attachSharedListeners = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  optionsRef: MutableRefObject<Options>,\n  sendMessage: SendMessage,\n) => {\n  let interval: number;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url, optionsRef.current.heartbeat);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n\n  return () => {\n    if (interval) clearInterval(interval);\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}