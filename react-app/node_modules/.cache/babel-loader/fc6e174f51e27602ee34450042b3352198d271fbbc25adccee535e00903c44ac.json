{"ast":null,"code":"var _jsxFileName = \"/Users/sisirdas/Projects/health-kit/consumer-webapp/kafka-websocket-consumer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [deviceData, setDeviceData] = useState({});\n  const {\n    lastMessage\n  } = useWebSocket('ws://localhost:3001');\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const messageContent = lastMessage.data;\n      console.log('Received message:', messageContent.toString());\n      const [deviceId, ecgData] = messageContent.split(':');\n      setDeviceData(prev => ({\n        ...prev,\n        [deviceId]: [...(prev[deviceId] || []), ecgData]\n      }));\n    }\n  }, [lastMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Kafka Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), Object.entries(deviceData).map(([deviceId, ecgDataArray]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: deviceId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ecgDataArray.map((ecgData, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: ecgData\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this)]\n      }, deviceId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ekZnGrhyj1QxS6Qo5Wn0zX+8X0g=\", false, function () {\n  return [useWebSocket];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","jsxDEV","_jsxDEV","App","_s","deviceData","setDeviceData","lastMessage","messageContent","data","console","log","toString","deviceId","ecgData","split","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","ecgDataArray","index","_c","$RefreshReg$"],"sources":["/Users/sisirdas/Projects/health-kit/consumer-webapp/kafka-websocket-consumer/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useWebSocket from 'react-use-websocket';\n\nfunction App() {\n  const [deviceData, setDeviceData] = useState({});\n  const { lastMessage } = useWebSocket('ws://localhost:3001');\n\n  useEffect(() => {\n    if (lastMessage !== null) {\n      const messageContent = lastMessage.data;\n      console.log('Received message:', messageContent.toString());\n      const [deviceId, ecgData] = messageContent.split(':');\n      setDeviceData(prev => ({\n        ...prev,\n        [deviceId]: [...(prev[deviceId] || []), ecgData],\n      }));\n    }\n  }, [lastMessage]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Kafka Messages</h2>\n        {Object.entries(deviceData).map(([deviceId, ecgDataArray]) => (\n          <div key={deviceId}>\n            <h3>{deviceId}</h3>\n            <ul>\n              {ecgDataArray.map((ecgData, index) => (\n                <li key={index}>{ecgData}</li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM;IAAES;EAAY,CAAC,GAAGP,YAAY,CAAC,qBAAqB,CAAC;EAE3DD,SAAS,CAAC,MAAM;IACd,IAAIQ,WAAW,KAAK,IAAI,EAAE;MACxB,MAAMC,cAAc,GAAGD,WAAW,CAACE,IAAI;MACvCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,cAAc,CAACI,QAAQ,CAAC,CAAC,CAAC;MAC3D,MAAM,CAACC,QAAQ,EAAEC,OAAO,CAAC,GAAGN,cAAc,CAACO,KAAK,CAAC,GAAG,CAAC;MACrDT,aAAa,CAACU,IAAI,KAAK;QACrB,GAAGA,IAAI;QACP,CAACH,QAAQ,GAAG,CAAC,IAAIG,IAAI,CAACH,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAEC,OAAO;MACjD,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC;EAEjB,oBACEL,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBhB,OAAA;MAAQe,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BhB,OAAA;QAAAgB,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACtBC,MAAM,CAACC,OAAO,CAACnB,UAAU,CAAC,CAACoB,GAAG,CAAC,CAAC,CAACZ,QAAQ,EAAEa,YAAY,CAAC,kBACvDxB,OAAA;QAAAgB,QAAA,gBACEhB,OAAA;UAAAgB,QAAA,EAAKL;QAAQ;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACnBpB,OAAA;UAAAgB,QAAA,EACGQ,YAAY,CAACD,GAAG,CAAC,CAACX,OAAO,EAAEa,KAAK,kBAC/BzB,OAAA;YAAAgB,QAAA,EAAiBJ;UAAO,GAAfa,KAAK;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAe,CAC9B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA,GANGT,QAAQ;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOb,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAClB,EAAA,CAjCQD,GAAG;EAAA,QAEcH,YAAY;AAAA;AAAA4B,EAAA,GAF7BzB,GAAG;AAmCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}