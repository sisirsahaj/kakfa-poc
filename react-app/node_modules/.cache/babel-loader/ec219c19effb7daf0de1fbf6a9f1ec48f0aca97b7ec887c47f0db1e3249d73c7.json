{"ast":null,"code":"var _jsxFileName = \"/Users/sisirdas/Projects/health-kit/kafka-websocket-consumer/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [deviceData, setDeviceData] = useState({});\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'ECG Data',\n      data: [],\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  });\n  const {\n    lastMessage\n  } = useWebSocket('ws://localhost:3001');\n  useEffect(() => {\n    if (lastMessage !== null) {\n      // Assuming lastMessage.data is a JSON string\n      const messageObj = JSON.parse(lastMessage.data);\n      const deviceId = messageObj.deviceId;\n      const ecgDataString = messageObj.value;\n      console.log(deviceId, ecgDataString);\n      const ecgData = parseFloat(ecgDataString); // Ensure ecgData is a number\n\n      setDeviceData(prev => ({\n        ...prev,\n        [deviceId]: [...(prev[deviceId] || []), ecgData]\n      }));\n\n      // Update chart data directly using the new ecgData\n      setChartData(prev => ({\n        ...prev,\n        labels: [...prev.labels, prev.labels.length + 1],\n        datasets: prev.datasets.map(dataset => ({\n          ...dataset,\n          data: [...dataset.data, ecgData] // Use ecgData directly\n        }))\n      }));\n    }\n  }, [lastMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Kafka Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"REdKimwj1fizlPbD4tRR3TUNYik=\", false, function () {\n  return [useWebSocket];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","Line","jsxDEV","_jsxDEV","App","_s","deviceData","setDeviceData","chartData","setChartData","labels","datasets","label","data","borderColor","tension","lastMessage","messageObj","JSON","parse","deviceId","ecgDataString","value","console","log","ecgData","parseFloat","prev","length","map","dataset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sisirdas/Projects/health-kit/kafka-websocket-consumer/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport { Line } from 'react-chartjs-2';\n\nfunction App() {\n  const [deviceData, setDeviceData] = useState({});\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'ECG Data',\n        data: [],\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1,\n      },\n    ],\n  });\n  const { lastMessage } = useWebSocket('ws://localhost:3001');\n\nuseEffect(() => {\n  if (lastMessage !== null) {\n    // Assuming lastMessage.data is a JSON string\n    const messageObj = JSON.parse(lastMessage.data);\n\n    const deviceId = messageObj.deviceId;\n    const ecgDataString = messageObj.value;\n    console.log(deviceId, ecgDataString);\n    const ecgData = parseFloat(ecgDataString); // Ensure ecgData is a number\n\n    setDeviceData(prev => ({\n      ...prev,\n      [deviceId]: [...(prev[deviceId] || []), ecgData],\n    }));\n\n    // Update chart data directly using the new ecgData\n    setChartData(prev => ({\n      ...prev,\n      labels: [...prev.labels, prev.labels.length + 1],\n      datasets: prev.datasets.map(dataset => ({\n        ...dataset,\n        data: [...dataset.data, ecgData], // Use ecgData directly\n      })),\n    }));\n  }\n}, [lastMessage]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Kafka Messages</h2>\n        <Line data={chartData} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC;IACzCY,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,UAAU;MACjBC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC,CAAC;EACF,MAAM;IAAEC;EAAY,CAAC,GAAGhB,YAAY,CAAC,qBAAqB,CAAC;EAE7DD,SAAS,CAAC,MAAM;IACd,IAAIiB,WAAW,KAAK,IAAI,EAAE;MACxB;MACA,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,WAAW,CAACH,IAAI,CAAC;MAE/C,MAAMO,QAAQ,GAAGH,UAAU,CAACG,QAAQ;MACpC,MAAMC,aAAa,GAAGJ,UAAU,CAACK,KAAK;MACtCC,OAAO,CAACC,GAAG,CAACJ,QAAQ,EAAEC,aAAa,CAAC;MACpC,MAAMI,OAAO,GAAGC,UAAU,CAACL,aAAa,CAAC,CAAC,CAAC;;MAE3Cd,aAAa,CAACoB,IAAI,KAAK;QACrB,GAAGA,IAAI;QACP,CAACP,QAAQ,GAAG,CAAC,IAAIO,IAAI,CAACP,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAEK,OAAO;MACjD,CAAC,CAAC,CAAC;;MAEH;MACAhB,YAAY,CAACkB,IAAI,KAAK;QACpB,GAAGA,IAAI;QACPjB,MAAM,EAAE,CAAC,GAAGiB,IAAI,CAACjB,MAAM,EAAEiB,IAAI,CAACjB,MAAM,CAACkB,MAAM,GAAG,CAAC,CAAC;QAChDjB,QAAQ,EAAEgB,IAAI,CAAChB,QAAQ,CAACkB,GAAG,CAACC,OAAO,KAAK;UACtC,GAAGA,OAAO;UACVjB,IAAI,EAAE,CAAC,GAAGiB,OAAO,CAACjB,IAAI,EAAEY,OAAO,CAAC,CAAE;QACpC,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;EAEf,oBACEb,OAAA;IAAK4B,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB7B,OAAA;MAAQ4B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5B7B,OAAA;QAAA6B,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBjC,OAAA,CAACF,IAAI;QAACY,IAAI,EAAEL;MAAU;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC/B,EAAA,CAlDQD,GAAG;EAAA,QAacJ,YAAY;AAAA;AAAAqC,EAAA,GAb7BjC,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}