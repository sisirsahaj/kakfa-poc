{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachListeners = void 0;\nvar socket_io_1 = require(\"./socket-io\");\nvar heartbeat_1 = require(\"./heartbeat\");\nvar constants_1 = require(\"./constants\");\nvar util_1 = require(\"./util\");\nvar bindMessageHandler = function (webSocketInstance, optionsRef, setLastMessage) {\n  var heartbeatCb;\n  if (optionsRef.current.heartbeat && webSocketInstance instanceof WebSocket) {\n    var heartbeatOptions = typeof optionsRef.current.heartbeat === \"boolean\" ? undefined : optionsRef.current.heartbeat;\n    heartbeatCb = (0, heartbeat_1.heartbeat)(webSocketInstance, heartbeatOptions);\n  }\n  webSocketInstance.onmessage = function (message) {\n    var _a;\n    heartbeatCb === null || heartbeatCb === void 0 ? void 0 : heartbeatCb();\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    if (optionsRef.current.heartbeat && typeof optionsRef.current.heartbeat !== \"boolean\" && ((_a = optionsRef.current.heartbeat) === null || _a === void 0 ? void 0 : _a.returnMessage) === message.data) return;\n    setLastMessage(message);\n  };\n};\nvar bindOpenHandler = function (webSocketInstance, optionsRef, setReadyState, reconnectCount) {\n  webSocketInstance.onopen = function (event) {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(constants_1.ReadyState.OPEN);\n  };\n};\nvar bindCloseHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n  if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return function () {};\n  }\n  (0, util_1.assertIsWebSocket)(webSocketInstance, optionsRef.current.skipAssert);\n  var reconnectTimeout;\n  webSocketInstance.onclose = function (event) {\n    var _a;\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(constants_1.ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      var reconnectAttempts = (_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        var nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ? optionsRef.current.reconnectInterval(reconnectCount.current) : optionsRef.current.reconnectInterval;\n        reconnectTimeout = window.setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval !== null && nextReconnectInterval !== void 0 ? nextReconnectInterval : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(\"Max reconnect attempts of \".concat(reconnectAttempts, \" exceeded\"));\n      }\n    }\n  };\n  return function () {\n    return reconnectTimeout && window.clearTimeout(reconnectTimeout);\n  };\n};\nvar bindErrorHandler = function (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) {\n  var reconnectTimeout;\n  webSocketInstance.onerror = function (error) {\n    var _a;\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose(__assign(__assign({}, error), {\n        code: 1006,\n        reason: \"An error occurred with the EventSource: \".concat(error),\n        wasClean: false\n      }));\n      setReadyState(constants_1.ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < ((_a = optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT)) {\n        var nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ? optionsRef.current.reconnectInterval(reconnectCount.current) : optionsRef.current.reconnectInterval;\n        reconnectTimeout = window.setTimeout(function () {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval !== null && nextReconnectInterval !== void 0 ? nextReconnectInterval : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts);\n        console.warn(\"Max reconnect attempts of \".concat(optionsRef.current.reconnectAttempts, \" exceeded\"));\n      }\n    }\n  };\n  return function () {\n    return reconnectTimeout && window.clearTimeout(reconnectTimeout);\n  };\n};\nvar attachListeners = function (webSocketInstance, setters, optionsRef, reconnect, reconnectCount, sendMessage) {\n  var setLastMessage = setters.setLastMessage,\n    setReadyState = setters.setReadyState;\n  var interval;\n  var cancelReconnectOnClose;\n  var cancelReconnectOnError;\n  if (optionsRef.current.fromSocketIO) {\n    interval = (0, socket_io_1.setUpSocketIOPing)(sendMessage);\n  }\n  bindMessageHandler(webSocketInstance, optionsRef, setLastMessage);\n  bindOpenHandler(webSocketInstance, optionsRef, setReadyState, reconnectCount);\n  cancelReconnectOnClose = bindCloseHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n  cancelReconnectOnError = bindErrorHandler(webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount);\n  return function () {\n    setReadyState(constants_1.ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\nexports.attachListeners = attachListeners;","map":{"version":3,"names":["socket_io_1","require","heartbeat_1","constants_1","util_1","bindMessageHandler","webSocketInstance","optionsRef","setLastMessage","heartbeatCb","current","heartbeat","WebSocket","heartbeatOptions","undefined","onmessage","message","onMessage","filter","_a","returnMessage","data","bindOpenHandler","setReadyState","reconnectCount","onopen","event","onOpen","ReadyState","OPEN","bindCloseHandler","reconnect","isEventSourceSupported","EventSource","assertIsWebSocket","skipAssert","reconnectTimeout","onclose","onClose","CLOSED","shouldReconnect","reconnectAttempts","DEFAULT_RECONNECT_LIMIT","nextReconnectInterval","reconnectInterval","window","setTimeout","DEFAULT_RECONNECT_INTERVAL_MS","onReconnectStop","console","warn","concat","clearTimeout","bindErrorHandler","onerror","error","onError","__assign","code","reason","wasClean","close","retryOnError","attachListeners","setters","sendMessage","interval","cancelReconnectOnClose","cancelReconnectOnError","fromSocketIO","setUpSocketIOPing","CLOSING","clearInterval","exports"],"sources":["/Users/sisirdas/Projects/health-kit/consumer-webapp/kafka-websocket-consumer/node_modules/react-use-websocket/src/lib/attach-listener.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\nimport { setUpSocketIOPing } from './socket-io';\nimport { heartbeat } from './heartbeat';\nimport {\n  DEFAULT_RECONNECT_LIMIT,\n  DEFAULT_RECONNECT_INTERVAL_MS,\n  ReadyState,\n  isEventSourceSupported,\n} from './constants';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { assertIsWebSocket } from './util';\n\nexport interface Setters {\n  setLastMessage: (message: WebSocketEventMap['message']) => void;\n  setReadyState: (readyState: ReadyState) => void;\n}\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setLastMessage: Setters['setLastMessage'],\n) => {\n  let heartbeatCb: () => void;\n\n  if (optionsRef.current.heartbeat && webSocketInstance instanceof WebSocket) {\n    const heartbeatOptions =\n      typeof optionsRef.current.heartbeat === \"boolean\"\n        ? undefined\n        : optionsRef.current.heartbeat;\n    heartbeatCb = heartbeat(webSocketInstance, heartbeatOptions);\n  }\n\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    heartbeatCb?.();\n    optionsRef.current.onMessage && optionsRef.current.onMessage(message);\n    if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {\n      return;\n    }\n    if (\n      optionsRef.current.heartbeat &&\n      typeof optionsRef.current.heartbeat !== \"boolean\" &&\n      optionsRef.current.heartbeat?.returnMessage === message.data\n    )\n      return;\n\n    setLastMessage(message);\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnectCount: MutableRefObject<number>,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    optionsRef.current.onOpen && optionsRef.current.onOpen(event);\n    reconnectCount.current = 0;\n    setReadyState(ReadyState.OPEN);\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n    return () => {};\n  }\n  assertIsWebSocket(webSocketInstance, optionsRef.current.skipAssert);\n  let reconnectTimeout: number;\n\n  webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n    optionsRef.current.onClose && optionsRef.current.onClose(event);\n    setReadyState(ReadyState.CLOSED);\n    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {\n      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n      if (reconnectCount.current < reconnectAttempts) {\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\n          optionsRef.current.reconnectInterval;\n\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);\n        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  optionsRef: MutableRefObject<Options>,\n  setReadyState: Setters['setReadyState'],\n  reconnect: () => void,\n  reconnectCount: MutableRefObject<number>,\n) => {\n  let reconnectTimeout: number;\n\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    optionsRef.current.onError && optionsRef.current.onError(error);\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      optionsRef.current.onClose && optionsRef.current.onClose({\n        ...error,\n        code: 1006,\n        reason: `An error occurred with the EventSource: ${error}`,\n        wasClean: false,\n      });\n\n      setReadyState(ReadyState.CLOSED);\n      webSocketInstance.close();\n    }\n    \n    if (optionsRef.current.retryOnError) {\n      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {\n        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === 'function' ?\n          optionsRef.current.reconnectInterval(reconnectCount.current) :\n          optionsRef.current.reconnectInterval;\n\n        reconnectTimeout = window.setTimeout(() => {\n          reconnectCount.current++;\n          reconnect();\n        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n      } else {\n        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts as number);\n        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);\n      }\n    }\n  };\n\n  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);\n};\n\nexport const attachListeners = (\n    webSocketInstance: WebSocketLike,\n    setters: Setters,\n    optionsRef: MutableRefObject<Options>,\n    reconnect: () => void,\n    reconnectCount: MutableRefObject<number>,\n    sendMessage: SendMessage,\n  ): (() => void) => {\n  const { setLastMessage, setReadyState } = setters;\n\n  let interval: number;\n  let cancelReconnectOnClose: () => void;\n  let cancelReconnectOnError: () => void;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(\n    webSocketInstance,\n    optionsRef,\n    setLastMessage,\n  );\n\n  bindOpenHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnectCount,\n  );\n\n  cancelReconnectOnClose = bindCloseHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  cancelReconnectOnError = bindErrorHandler(\n    webSocketInstance,\n    optionsRef,\n    setReadyState,\n    reconnect,\n    reconnectCount,\n  );\n\n  return () => {\n    setReadyState(ReadyState.CLOSING);\n    cancelReconnectOnClose();\n    cancelReconnectOnError();\n    webSocketInstance.close();\n    if (interval) clearInterval(interval);\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}